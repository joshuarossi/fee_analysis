{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["plans","monthly_cost","rev_share","min_tx","both","App","useState","plan","setPlan","volume","setVolume","fee","setFee","revenue","total_cost","Math","max","className","value","onChange","target","selected","label","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAIMA,G,MAAQ,CACZ,CAAEC,aAAc,IAAMC,UAAW,IAAMC,OAAQ,KAAQC,MAAM,GAC7D,CAAEH,aAAc,IAAOC,UAAW,GAAKC,OAAQ,KAAQC,MAAM,GAC7D,CAAEH,aAAc,IAAOC,UAAW,IAAMC,OAAQ,KAAQC,MAAM,GAC9D,CAAEH,aAAc,IAAOC,UAAW,IAAMC,OAAQ,KAAQC,MAAM,GAC9D,CAAEH,aAAc,IAAQC,UAAW,EAAGC,OAAQ,EAAGC,MAAM,KAiE1CC,EA9DH,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACTC,EADS,KACHC,EADG,OAEYF,mBAAS,KAFrB,mBAETG,EAFS,KAEDC,EAFC,OAGMJ,mBAAS,KAHf,mBAGTK,EAHS,KAGJC,EAHI,KAIVC,EAAUJ,EAASE,EAJT,EAKkCX,EAAMO,GAAhDN,EALQ,EAKRA,aAAcC,EALN,EAKMA,UAAWC,EALjB,EAKiBA,OAAQC,EALzB,EAKyBA,KACnCU,EAAaV,EACA,GAAfH,EAAoBc,KAAKC,IAAIH,EAAUX,EAAWO,EAASN,GAC3DY,KAAKC,IACY,GAAff,EACAc,KAAKC,IAAIH,EAAUX,EAAWO,EAASN,IAE7C,OACE,oCACE,yBAAKc,UAAU,OACb,4BAAQA,UAAU,cAAlB,kBACA,sCACA,4BACEC,MAAOX,EACPY,SAAU,gBAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BV,EAAQU,KAE7C,4BAAQG,UAAQ,EAACH,MAAO,GAAxB,KAGA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,KACA,4BAAQA,MAAO,GAAf,MAEF,6BACA,qCACA,2BACEI,MAAM,SACNC,KAAK,SACLL,MAAOT,EACPU,SAAU,gBAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BR,EAAUQ,MAEjD,6BACA,oCACA,2BACEK,KAAK,SACLL,MAAOP,EACPQ,SAAU,gBAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BN,EAAOM,MAE9C,4DAA8Bd,EAAO,MAAQ,OAC7C,mDAAqBH,IACrB,oDAAkC,IAAZC,EAAtB,eAA4CW,EAAUX,EAAtD,MACA,iDAA4B,IAATC,EAAnB,2BACEM,EAASN,EADX,MAGA,8CAAgBM,IAChB,uDA5DY,IA4D2BK,IACvC,0DAA4BD,IAC5B,mDAAqBA,GA9DT,IA8DkCC,KAC9C,wDAA0BA,IAC1B,2DAA6BD,IAC7B,mDAAqBA,EAAUC,OCxDnBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.04afd84b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst startup_fee = 50000;\nconst plans = [\n  { monthly_cost: 5000, rev_share: 0.25, min_tx: 0.0005, both: true },\n  { monthly_cost: 10000, rev_share: 0.2, min_tx: 0.0005, both: true },\n  { monthly_cost: 20000, rev_share: 0.15, min_tx: 0.0005, both: false },\n  { monthly_cost: 50000, rev_share: 0.05, min_tx: 0.0003, both: false },\n  { monthly_cost: 100000, rev_share: 0, min_tx: 0, both: false },\n];\n\nconst App = () => {\n  const [plan, setPlan] = useState(0);\n  const [volume, setVolume] = useState(100000);\n  const [fee, setFee] = useState(0.01);\n  const revenue = volume * fee;\n  const { monthly_cost, rev_share, min_tx, both } = plans[plan];\n  const total_cost = both\n    ? monthly_cost * 12 + Math.max(revenue * rev_share, volume * min_tx)\n    : Math.max(\n        monthly_cost * 12,\n        Math.max(revenue * rev_share, volume * min_tx)\n      );\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App-header\">Fee Calculator</header>\n        <p> Plan: </p>\n        <select\n          value={plan}\n          onChange={({ target: { value } }) => setPlan(value)}\n        >\n          <option selected value={0}>\n            1\n          </option>\n          <option value={1}>2</option>\n          <option value={2}>3</option>\n          <option value={3}>4</option>\n          <option value={4}>5</option>\n        </select>\n        <br />\n        <p>Volume</p>\n        <input\n          label=\"Volume\"\n          type=\"number\"\n          value={volume}\n          onChange={({ target: { value } }) => setVolume(value)}\n        ></input>\n        <br />\n        <p>Fee: </p>\n        <input\n          type=\"number\"\n          value={fee}\n          onChange={({ target: { value } }) => setFee(value)}\n        ></input>\n        <p>{`Rev Share + Monthly? : ${both ? 'Yes' : 'No'}`}</p>\n        <p>{`Monthly Fee: $${monthly_cost}`}</p>\n        <p>{`Revenue Share: ${rev_share * 100}% ($${revenue * rev_share})`}</p>\n        <p>{`Minimum TX: ${min_tx * 10000} Basis Points ($${\n          volume * min_tx\n        })`}</p>\n        <p>{`Volume: $${volume}`}</p>\n        <p>{`First Year Cost: $${startup_fee + total_cost}`}</p>\n        <p>{`First Year Revenue: $${revenue}`}</p>\n        <p>{`Net Revenue: $${revenue - (startup_fee + total_cost)}`}</p>\n        <p>{`Second Year Cost: $${total_cost}`}</p>\n        <p>{`Second Year Revenue: $${revenue}`}</p>\n        <p>{`Net Revenue: $${revenue - total_cost}`}</p>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}